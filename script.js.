// Aici vom stoca întrebările testului și informații despre ele
const questions = [
    {
        question: "Care este aspectul cel mai important pentru tine când alegi o locuință?",
        options: [
            { text: "Locația centrală și accesul la facilități urbane.", score: 10 },
            { text: "Spațiul suficient pentru familie și o grădină.", score: 20 },
            { text: "Conexiunea cu natura și liniștea, chiar și în afara orașului.", score: 30 },
            { text: "Designul minimalist și funcționalitatea, fără aglomerație.", score: 40 },
            { text: "Atmosfera familiară, tradițională și siguranța zonei.", score: 50 }
        ]
    },
    {
        question: "Cum îți imaginezi o seară perfectă acasă?",
        options: [
            { text: "Explorând noul restaurant deschis în centru.", score: 10 },
            { text: "Petrecând timp de calitate cu familia în jurul mesei sau în curte.", score: 20 },
            { text: "Relaxându-te într-un spațiu luminos, plin de plante, citind o carte.", score: 30 },
            { text: "Organizând și rearanjând spațiul pentru a maximiza eficiența.", score: 40 },
            { text: "O cină liniștită acasă, cu o carte bună sau un film clasic.", score: 50 }
        ]
    },
    {
        question: "Ce tip de activități preferi în timpul liber?",
        options: [
            { text: "Evenimente culturale, ieșiri în oraș, descoperirea de locuri noi.", score: 10 },
            { text: "Jocuri de societate cu familia, activități sportive în parc.", score: 20 },
            { text: "Drumeții, grădinărit, meditație sau yoga.", score: 30 },
            { text: "Optimizarea unor procese, învățarea unei noi tehnologii.", score: 40 },
            { text: "Vizite la muzee, plimbări în cartiere vechi, timp petrecut cu prieteni apropiați.", score: 50 }
        ]
    }
    // Poți adăuga mai multe întrebări aici
];

const questionTextElement = document.getElementById('question-text');
const optionsContainer = document.getElementById('options-container');
const prevButton = document.getElementById('prev-button');
const nextButton = document.getElementById('next-button');
const submitButton = document.getElementById('submit-button');
const resultMessageElement = document.getElementById('result-message');

let currentQuestionIndex = 0;
let userAnswers = []; // Va stoca obiecte { questionIndex: X, selectedOptionScore: Y }

function loadQuestion() {
    if (currentQuestionIndex < questions.length) {
        const currentQuestion = questions[currentQuestionIndex];
        questionTextElement.textContent = currentQuestion.question;
        optionsContainer.innerHTML = ''; // Curăță opțiunile anterioare

        currentQuestion.options.forEach((option, index) => {
            const button = document.createElement('button');
            button.textContent = option.text;
            button.classList.add('option-button');
            button.dataset.score = option.score; // Stocăm scorul în dataset
            button.dataset.index = index; // Stocăm indexul opțiunii

            // Verificăm dacă răspunsul a fost deja selectat pentru această întrebare
            const previousAnswer = userAnswers.find(answer => answer.questionIndex === currentQuestionIndex);
            if (previousAnswer && previousAnswer.selectedOptionIndex === index) {
                button.classList.add('selected');
            }

            button.addEventListener('click', () => selectOption(index, option.score));
            optionsContainer.appendChild(button);
        });

        // Actualizează starea butoanelor de navigare
        updateNavigationButtons();
        // Verifică dacă utilizatorul a răspuns la întrebarea curentă pentru a activa butonul "Următorul"
        const answered = userAnswers.some(answer => answer.questionIndex === currentQuestionIndex);
        nextButton.disabled = !answered;
        submitButton.disabled = !answered; // Dezactivăm și submit dacă nu e răspuns
    } else {
        // Nu ar trebui să ajungem aici în mod normal, dacă butoanele sunt ascunse corect
        console.log("Test finalizat (teoretic)");
    }
}

function selectOption(optionIndex, score) {
    // Deselectează orice altă opțiune selectată anterior pentru întrebarea curentă
    const buttons = optionsContainer.querySelectorAll('.option-button');
    buttons.forEach(btn => btn.classList.remove('selected'));

    // Selectează opțiunea curentă
    const selectedButton = buttons[optionIndex];
    selectedButton.classList.add('selected');

    // Găsește sau adaugă răspunsul utilizatorului
    const existingAnswerIndex = userAnswers.findIndex(answer => answer.questionIndex === currentQuestionIndex);
    if (existingAnswerIndex !== -1) {
        userAnswers[existingAnswerIndex] = {
            questionIndex: currentQuestionIndex,
            selectedOptionIndex: optionIndex,
            selectedOptionScore: score
        };
    } else {
        userAnswers.push({
            questionIndex: currentQuestionIndex,
            selectedOptionIndex: optionIndex,
            selectedOptionScore: score
        });
    }
    console.log("Răspunsuri curente:", userAnswers);

    // Activează butonul "Următorul" odată ce un răspuns este selectat
    nextButton.disabled = false;
    submitButton.disabled = (currentQuestionIndex !== questions.length - 1); // Activează submit doar la ultima întrebare
}

function updateNavigationButtons() {
    prevButton.style.display = currentQuestionIndex === 0 ? 'none' : 'inline-block';
    nextButton.style.display = currentQuestionIndex === questions.length - 1 ? 'none' : 'inline-block';
    submitButton.style.display = currentQuestionIndex === questions.length - 1 ? 'inline-block' : 'none';

    // Dezactivează "Următorul" dacă nu s-a răspuns la întrebarea curentă
    const answered = userAnswers.some(answer => answer.questionIndex === currentQuestionIndex);
    nextButton.disabled = !answered;
    // Dezactivează "Submit" dacă nu s-a răspuns la ultima întrebare
    if (currentQuestionIndex === questions.length - 1) {
        submitButton.disabled = !answered;
    }
}

nextButton.addEventListener('click', () => {
    if (currentQuestionIndex < questions.length - 1) {
        currentQuestionIndex++;
        loadQuestion();
    }
});

prevButton.addEventListener('click', () => {
    if (currentQuestionIndex > 0) {
        currentQuestionIndex--;
        loadQuestion();
    }
});

submitButton.addEventListener('click', () => {
    // Aici vom trimite răspunsurile la backend
    alert("Test finalizat! Răspunsurile tale vor fi trimise pentru procesare.");
    // Temporar vom afișa doar un mesaj de confirmare
    questionTextElement.textContent = "Mulțumim pentru participare! Rezultatul tău va fi afișat după confirmarea plății.";
    optionsContainer.innerHTML = '';
    document.getElementById('navigation-buttons').style.display = 'none';
    resultMessageElement.style.display = 'block';
    resultMessageElement.textContent = "Veți fi direcționat către pagina de plată.";

    // Aici va veni logica de redirecționare către Lemon Squeezy
    // Exemplu (trebuie înlocuit cu link-ul tău real Lemon Squeezy):
    // window.location.href = "https://your-lemonsqueezy-checkout-link.com";
});

// Inițializare
loadQuestion();

